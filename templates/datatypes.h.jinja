/********************************************************************************
 * Copyright (c) 2025 Contributors to the Eclipse Foundation
 *
 * See the NOTICE file(s) distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Apache License Version 2.0 which is available at
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * SPDX-License-Identifier: Apache-2.0
 ********************************************************************************/
{% import "macros" as macros %}
#ifndef SCORE_{{ns.name | upper }}_H
#define SCORE_{{ns.name | upper }}_H

#include "score/mw/com/types.h"

namespace {{ns.name}} {
{% for en in ns.enumerations %}
{% if en.description is defined %}
    /*
     * {{ en.description }}
     */
{% endif %}
    enum class {{ en.name }} : {{macros.to_cpp_type(en.datatype)}} {
{% for lit in en.literals %}
{% if lit.description is defined -%}
        // {{ lit.description }}
{% endif %}
        {{lit.name }} = {{lit.value}}{{macros.to_cpp_suffix(en.datatype)}},
{% endfor %}
    };

{% endfor %}
{% for str in ns.structs %}
{% if str.description  is defined  %}
    /*
     * {{ str.description }}
     */
{% endif %}
    struct {{ str.name }} {
        {% set vars = namespace() -%}
        {%- set vars.first = true -%}
        {{ str.name }}(): {% for member in str.members %}{% if member.default is defined %}{% if not vars.first %}, {% endif %}{{member.name}}({{macros.cpp_type_prefixed_defaultvalue(member.datatype, member.default)}}){% set vars.first = false %}{% endif %}{% endfor %} {};
        {{ str.name }}({{ str.name }}&&) = default;
        {{ str.name }}(const {{ str.name }}&) = default;
        {{ str.name }}& operator=({{ str.name }}&&) = default;
        {{ str.name }}& operator=(const {{ str.name }}&) = default;
{% for member in str.members %} 
{% if member.description  is defined  %}
        // {{ member.description }}
{% endif %}
        {{macros.to_cpp_type(member.datatype)}} {{member.name }};
{% endfor %}
    };

{% endfor %}

{% for intf in ns.interfaces %}
    template <typename Trait>
    class {{intf.name}}Interface : public Trait::Base
    {
        public:
        using Trait::Base::Base;

{% for ev in intf.events %}
        typename Trait::template Event<{{ macros.to_cpp_type(ev.datatype) }}> {{ ev.name }}{*this, "{{ ev.name }}"};
{% endfor %}
    };

{% endfor %}

{% for intf in ns.interfaces %}
    using {{intf.name}}Proxy = score::mw::com::AsProxy<{{intf.name}}Interface>;
    using {{intf.name}}Skeleton = score::mw::com::AsSkeleton<{{intf.name}}Interface>;
{% endfor %}

}
#endif // SCORE_{{ns.name | upper }}_H
